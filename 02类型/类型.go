package main

import "fmt"

func main(){
	//下面是 Go 支持的基本类型：
	//
	//bool
	//数字类型
	//int8, int16, int32, int64, int
	//uint8, uint16, uint32, uint64, uint
	//float32, float64
	//complex64, complex128
	//byte
	//rune
	//string

	a:=false;
	fmt.Println(a); //false


	//有符号整型
	//int8：表示 8 位有符号整型
	//大小：8 位
	//范围：-128～127
	//
	//int16：表示 16 位有符号整型
	//大小：16 位
	//范围：-32768～32767
	//
	//int32：表示 32 位有符号整型
	//大小：32 位
	//范围：-2147483648～2147483647
	//
	//int64：表示 64 位有符号整型
	//大小：64 位
	//范围：-9223372036854775808～9223372036854775807
	//
	//int：根据不同的底层平台（Underlying Platform），表示 32 或 64 位整型。除非对整型的大小有特定的需求，否则你通常应该使用 int 表示整型。
	//大小：在 32 位系统下是 32 位，而在 64 位系统下是 64 位。
	//范围：在 32 位系统下是 -2147483648～2147483647，而在 64 位系统是 -9223372036854775808～9223372036854775807。

	var a1 int=1;
	var a2 int8=127;
	var a3 int16=32767;
	var a4 int32=2147483647;
	var a5 int64=9223372036854775807;
	fmt.Println(a1,a2,a3,a4,a5);

	//自动填充,只有Printf可以做到
	fmt.Printf("a1 is %v,a2 is %v",a1,a2);  //a1 is 1,a2 is 127


	//无符号整型
	//uint8：表示 8 位无符号整型
	//大小：8 位
	//范围：0～255
	//
	//uint16：表示 16 位无符号整型
	//大小：16 位
	//范围：0～65535
	//
	//uint32：表示 32 位无符号整型
	//大小：32 位
	//范围：0～4294967295
	//
	//uint64：表示 64 位无符号整型
	//大小：64 位
	//范围：0～18446744073709551615
	//
	//uint：根据不同的底层平台，表示 32 或 64 位无符号整型。
	//大小：在 32 位系统下是 32 位，而在 64 位系统下是 64 位。
	//范围：在 32 位系统下是 0～4294967295，而在 64 位系统是 0～18446744073709551615。
	//
	//浮点型
	//float32：32 位浮点数
	//float64：64 位浮点数
	fmt.Println();

	var b1 uint16=1<<16-1;  //65535
	fmt.Println(b1);

	b2:=1.1;
	b3:=1.111;
	fmt.Println(b3-b2);  //0.010999999999999899

	//复数类型
	//complex64：实部和虚部都是 float32 类型的的复数。
	//complex128：实部和虚部都是 float64 类型的的复数。

	c1:=1+2i;
	c2:=complex(2,3);  //内置函数，返回复数
	fmt.Println(c1+c2);  //(3+5i)

	//string
	d1:="jay";
	d1+="ice";
	fmt.Println(d1);  //jayice


	//类型转换
	e1:=10;
	e2:=1.1;
	//sum:=e1+e2;   //类型不匹配
	sum:=float64(e1)+e2;  //方法与java有一点不一样,是：   T(v);
	fmt.Println(sum);  //11.1

	


}
